# Base image: start with CUDA libs, using nvidia runtime
#FROM openhorizon/amd64_vi_caffe_nvidia:8.6.0
FROM nvidia/cuda:8.0-cudnn7-devel-ubuntu16.04

#AUTHOR bmwshop@gmail.com
MAINTAINER nuculur@gmail.com

# this installs darknet: http://pjreddie.com/darknet/install/
# and then configures the tiny model for yolo
RUN apt-get update && apt-get install -y git pkg-config wget libopencv-dev

WORKDIR /
# Clone darknet with mod to produce small output json file with prediction values
RUN git clone -b socket https://github.com/chrod/darknet.git
WORKDIR /darknet
COPY darknet-build/Makefile /darknet/Makefile

ENV PATH /usr/local/cuda/bin:$PATH
RUN make -j4

# Fetch weights files
RUN wget http://pjreddie.com/media/files/yolov3.weights

# Start command (checks existence of DARKNET_CAMERA environment variable)
COPY start.sh /start.sh
RUN chmod +x /start.sh
CMD ["/bin/bash", "/start.sh"]

# Squash build (remove extra junk)
RUN apt-get -y autoremove && apt-get -y clean

# Build:
# docker build --no-cache --squash -f Dockerfile.darknet -t openhorizon/amd64_darknet_nvidia:8.0-cudnn7-devel-ubuntu16.04 .

# now assuming you have an attached webcam (not the itegrated one, which is typically cam 0 (/dev/video0))
# xhost + && docker run --privileged -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --rm openhorizon/amd64_darknet_nvidia:8.0-cudnn7-devel-ubuntu16.04 ./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights 
# or to test on one picture (it works even if you don't have X)
# docker run --privileged -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --rm openhorizon/amd64_darknet_nvidia:8.0-cudnn7-devel-ubuntu16.04 ./darknet yolo test cfg/coco.data cfg/yolov3.cfg yolov3.weights data/person.jpg
